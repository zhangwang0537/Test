/* Copyright 2017 The MathWorks, Inc. */

#ifndef MATLAB_ENGINE_HPP
#define MATLAB_ENGINE_HPP

#include <vector>
#include <streambuf>
#include <memory>
#include <future>
#include <string>
#include "engine_util.hpp"
#include <MatlabDataArray/StructArray.hpp>
#include <MatlabDataArray/StructRef.hpp>
#include <MatlabDataArray/Struct.hpp>
#include <MatlabDataArray/CharArray.hpp>
#include <MatlabDataArray/TypedArray.hpp>
#include <MatlabDataArray/Reference.hpp>

namespace matlab {

    namespace engine {

        class MATLABEngine {
        public:
            
            /**
            * Evaluate a MATLAB function synchronously
            *
            * @param function - The name of a MATLAB function
            * @param nlhs - The number of output to be expected
            * @param args - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return std::vector<matlab::data::Array> - A vector of MATLAB Data Array as the result of the MATLAB function
            * 
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            std::vector<matlab::data::Array> feval(const String &function,
                                                   const size_t nlhs,
                                                   const std::vector<matlab::data::Array> &args,
                                                   const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                                   const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );
            
            /**
            * Evaluate a MATLAB function synchronously
            *
            * @param function - The name of a MATLAB function
            * @param args - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return matlab::data::Array - A MATLAB Data Array as the result of the MATLAB function
            *
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            matlab::data::Array feval(const String &function,
                                      const std::vector<matlab::data::Array> &args,
                                      const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                      const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Evaluate a MATLAB function synchronously
            *
            * @param function - The name of a MATLAB function
            * @param arg - The argument of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return matlab::data::Array - A MATLAB Data Array as the result of the MATLAB function
            *
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            matlab::data::Array feval(const String &function,
                                      const matlab::data::Array &arg,
                                      const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                      const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Evaluate a MATLAB function synchronously
            *
            * @param function - The name of a MATLAB function
            * @param rhsArgs - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return ReturnType - The result of the MATLAB function
            *
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            template<class ReturnType, typename...RhsArgs>
            ReturnType feval(const String &function,
                    const std::shared_ptr<StreamBuffer> &output,
                    const std::shared_ptr<StreamBuffer> &error, 
                    RhsArgs&&... rhsArgs
            );
            
            /**
            * Evaluate a MATLAB function synchronously
            *
            * @param function - The name of a MATLAB function
            * @param rhsArgs - The arguments of the MATLAB function
            * @return ReturnType - The result of the MATLAB function
            *
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            template<class ReturnType, typename...RhsArgs>
            ReturnType feval(const String &function,
                    RhsArgs&&... rhsArgs
            );
            
            /**
            * Evaluate a MATLAB statement synchronously
            *
            * @param statement- The MATLAB statement to be evaluated
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return none
            *
            * @throw MATLABSyntaxException, MATLABExecutionException
            */
            void eval(const String &statement,
                      const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                      const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Obtain a variable from the MATLAB base or global workspace
            *
            * @param varName - The name of a MATLAB variable in the base or global workspace
            * @return matlab::data::Array - The variable returned from MATLAB base or global workspace
            *
            * @throw none
            */
            matlab::data::Array getVariable(const String &varName, WorkspaceType workspaceType = WorkspaceType::BASE);

            /**
            * Send a variable to the MATLAB base or global workspace
            *
            * @param varName - The name of a MATLAB variable in the base or global workspace
            * @param var - The variable to be sent to the MATLAB base or global workspace
            * @return none
            *
            * @throw none
            */
            void setVariable(const String &varName, const matlab::data::Array &var, WorkspaceType workspaceType = WorkspaceType::BASE);
            
            /**
            * Obtain the value of an object property
            *
            * @param object - An object
            * @param propertyName - The name of the property to set for the object
            * @return matlab::data::Array - The property from the object
            *
            * @throw none
            */
            matlab::data::Array getProperty(const matlab::data::Array &object, const String &propertyName);

            /**
            * Set a property value of an object
            *
            * @param object - An object
            * @param propertyName - The name of the property to set for the object
            * @param property - The value of the property to set for the object
            * @return none
            *
            * @throw none
            */
            void setProperty(matlab::data::Array &object, const String &propertyName, const matlab::data::Array &property);

            /**
            * Evaluate a MATLAB function asynchronously
            *
            * @param function - The name of a MATLAB function
            * @param nlhs - The number of output to be expected
            * @param args - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return FutureResult<std::vector<matlab::data::Array>> - A future of a vector of MATLAB Data Array as the result of the MATLAB function
            *
            * @throw none
            */
            FutureResult<std::vector<matlab::data::Array> > fevalAsync(const String &function,
                                                                       const size_t nlhs, 
                                                                       const std::vector<matlab::data::Array> &args,
                                                                       const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                                                       const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Evaluate a MATLAB function asynchronously
            *
            * @param function - The name of a MATLAB function
            * @param args - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return FutureResult<matlab::data::Array> - A future of a MATLAB Data Array as the result of the MATLAB function
            *
            * @throw none
            */
            FutureResult<matlab::data::Array> fevalAsync(const String &function,
                                                         const std::vector<matlab::data::Array> &args,
                                                         const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                                         const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Evaluate a MATLAB function asynchronously
            *
            * @param function - The name of a MATLAB function
            * @param arg - The argument of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return FutureResult<matlab::data::Array> - A future of a MATLAB Data Array as the result of the MATLAB function
            *
            * @throw none
            */
            FutureResult<matlab::data::Array> fevalAsync(const String &function,
                                                         const matlab::data::Array &arg,
                                                         const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                                         const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Evaluate a MATLAB function asynchronously
            *
            * @param function - The name of a MATLAB function
            * @param rhsArgs - The arguments of the MATLAB function
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return FutureResult<ReturnType> - A future to the result of the MATLAB function
            *
            * @throw none
            */
            template<class ReturnType, typename...RhsArgs>
            FutureResult<ReturnType> fevalAsync(const String &function,
                                       const std::shared_ptr<StreamBuffer> &output,
                                       const std::shared_ptr<StreamBuffer> &error,
                                       RhsArgs&&... rhsArgs
            );
            
            /**
            * Evaluate a MATLAB function asynchronously
            *
            * @param function - The name of a MATLAB function
            * @param rhsArgs - The arguments of the MATLAB function
            * @return FutureResult<ReturnType> - A future to the result of the MATLAB function
            *
            * @throw none
            */
            template<class ReturnType, typename...RhsArgs>
            FutureResult<ReturnType> fevalAsync(const String &function,
                                       RhsArgs&&... rhsArgs
            );
            
            /**
            * Evaluate a MATLAB statement asynchronously
            *
            * @param statement- The MATLAB statement to be evaluated
            * @param output - The stream used to redirect standard output generated by MATLAB
            * @param error - The stream used to redirect standard error generated by MATLAB
            * @return FutureResult<void> - A future to the evaluate of the MATLAB statement
            *
            * @throw none
            */
            FutureResult<void> evalAsync(const String &str,
                                         const std::shared_ptr<StreamBuffer> &output = std::shared_ptr<StreamBuffer>(),
                                         const std::shared_ptr<StreamBuffer> &error = std::shared_ptr<StreamBuffer>()
            );

            /**
            * Obtain a variable from the MATLAB base or global workspace asynchronously
            *
            * @param varName - The name of a MATLAB variable in the base or global workspace
            * @return FutureResult<matlab::data::Array> - A future to get the variable returned from MATLAB base or global workspace
            *
            * @throw none
            */
            FutureResult<matlab::data::Array> getVariableAsync(const String &varName, WorkspaceType workspaceType = WorkspaceType::BASE);

            /**
            * Send a variable to the MATLAB base or global workspace asynchronously
            *
            * @param varName - The name of a MATLAB variable in the base or global workspace
            * @param var - The variable to be sent to the MATLAB base or global workspace
            * @return FutureResult<void> - A future to the operation
            *
            * @throw none
            */
            FutureResult<void> setVariableAsync(const String &varName, const matlab::data::Array& var, WorkspaceType workspaceType = WorkspaceType::BASE);

            /**
            * Obtain the value of an object property asynchronously
            *
            * @param object - An object
            * @param propertyName - The name of the property to set for the object
            * @return FutureResult<matlab::data::Array> - A future to get the property from the object
            *
            * @throw none
            */
            FutureResult<matlab::data::Array> getPropertyAsync(const matlab::data::Array &object, const String &propertyName);

            /**
            * Set a property value of an object asynchronously
            *
            * @param object - An object
            * @param propertyName - The name of the property to set for the object
            * @param property - The value of the property to set for the object
            * @return FutureResult<void> - A future to the operation
            *
            * @throw none
            */
            FutureResult<void> setPropertyAsync(matlab::data::Array &object, const String &propertyName, const matlab::data::Array &property);


            /**
            * Constructor
            *
            * @param handle - The internal implementation
            * 
            * @throw none
            */
            MATLABEngine(uint64_t handle);

            /**
            * Destructor
            *
            * @throw none
            */
            ~MATLABEngine();
        private:
            uint64_t matlabHandle;

        };

        void writeToStreamBuffer(void* buffer, const char16_t* stream, size_t n);
        void deleteStreamBufferImpl(void* impl);
    }
}

#endif /* MATLAB_ENGINE_HPP */
